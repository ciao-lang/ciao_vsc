{
  "comment": "This Source Code Form is subject to the terms of the Mozilla Public License,\nv. 2.0. If a copy of the MPL was not distributed with this file, You can obtain\none at http://mozilla.org/MPL/2.0/.",
  "name": "ciao",
  "author": "Ciao Development Team",
  "scopeName": "source.ciao",
  "fileTypes": ["pl", "lpdoc"],
  "patterns": [
    {
      "name": "comment.line.ciao",
      "match": "%.*$"
    },
    {
      "name": "comment.block.ciao",
      "begin": "/\\*",
      "end": "\\*/"
    },
    {
      "name": "entity.name.function.ciao",
      "match": "^\\w+([_-]?\\w+)*"
    },
    {
      "name": "keyword.other.bug.ciao",
      "match": "bug"
    },
    {
      "name": "keyword.other.cut.ciao",
      "match": "!"
    },
    {
      "name": "constant.character.ciao",
      "match": "0'(\\.|.)"
    },
    {
      "name": "variable.parameter.named.underline.ciao",
      "match": "_[A-Z][\\w\\-\\.']*"
    },
    {
      "name": "constant.other.shell.ciao",
      "match": "#!/usr/bin/env ciao-shell"
    },
    {
      "name": "entity.name.function.application.ciao",
      "match": "~[a-z][\\w\\-\\.']*"
    },
    {
      "name": "support.function.directives.module.ciao",
      "match": ":-\\s*(module|package|class|interface|mixin|use_module|ensure_loaded|use_package|include|use_foreign_library|use_foreign_source|reexport|import|initialization|on_abort|use_class|extends|on_abort|implements|inherit_class)"
    },
    {
      "name": "support.function.directives.builtin.ciao",
      "match": ":-\\s*(new_declaration|op|load_compilation_module|add_sentence_trans|add_term_trans|add_clause_trans|add_goal_trans|set_prolog_flag|push_prolog_flag|pop_prolog_flag|compound_resource|platform_constants|platform|load_resource_module|resource|head_cost|literal_cost|trust_default|granularity_resources|default_cost|load_test_module|load_test_package|extra_compiler_opts|extra_linker_opts)"
    },
    {
      "name": "support.function.directives.predicate.ciao",
      "match": ":-\\s*(export|dynamic|discontiguous|multifile|meta_predicate|redefining|impl_defined|mydirective)"
    },
    {
      "name": "support.function.directives.library.ciao",
      "match": ":-\\s*(function|fun_eval|fun_return|lazy|funct|argnames|make)"
    },
    {
      "name": "keyword.other.status.checked.ciao",
      "match": "(:-\\s*checked|\\s*checked(?=\\())"
    },
    {
      "name": "keyword.other.status.false.ciao",
      "match": "(:-\\s*false|\\s*false(?=\\())"
    },
    {
      "name": "keyword.other.status.true.ciao",
      "match": "(:-\\s*true|\\s*true(?=\\())"
    },
    {
      "name": "keyword.other.status.modedef.ciao",
      "match": ":-\\s*modedef"
    },
    {
      "name": "keyword.other.status.trust.ciao",
      "match": "(:-\\s*trust|\\s*trust(?=\\())"
    },
    {
      "name": "keyword.other.status.entry.ciao",
      "match": ":-\\s*entry"
    },
    {
      "name": "keyword.other.status.check.ciao",
      "match": "(:-\\s*check|\\s*check(?=\\())"
    },
    {
      "name": "keyword.other.assertions.ciao",
      "match": ":-\\s*(test|texec|calls|success|comp|decl|if|else|elif|endif|compilation_fact)"
    },
    {
      "name": "keyword.other.assertions.pred.ciao",
      "match": "((?<=:-\\s*\\w*\\s*[\\n*\\s*]*)pred|:-\\s*[\\n*\\s*]*pred)"
    },
    {
      "name": "keyword.other.prop.ciao",
      "match": ":-\\s*prop"
    },
    {
      "name": "keyword.other.regtype.ciao",
      "match": ":-\\s*regtype"
    },
    {
      "name": "keyword.other.doc.ciao",
      "begin": ":-\\s*doc\\s*",
      "end": "\\.",
      "patterns": [
        {
          "name": "delimiter.parenthesis.ciao",
          "match": "(\\(|\\))"
        },
        {
          "name": "string.doc.ciao",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "keyword.other.doc.commands.ciao",
              "match": "@[a-zA-Z]*"
            }
          ]
        }
      ]
    },
    {
      "name": "keyword.operator.ciao",
      "match": "(=:=|:-|-->|:=|\\s+@\\s+|&|\\^%|=>|<=|<-)"
    },
    {
      "name": "keyword.predefined.operator.ciao",
      "match": "(=<|>=|=|>|<|->|-|\\+|\\*)"
    },
    {
      "name": "variable.parameter.named.ciao",
      "match": "[A-Z][\\w\\-\\.']*"
    },
    {
      "name": "constant.numeric.float.ciao",
      "match": "\\d*\\.\\d+([eE][\\-+]?\\d+)?"
    },
    {
      "name": "constant.numeric.hex.ciao",
      "match": "0[xX][0-9a-fA-F]+"
    },
    {
      "name": "constant.numeric.decimal.ciao",
      "match": "\\d+"
    },
    {
      "name": "string.assertions.ciao",
      "begin": "\\s*#[\\s*\\n*]*\"",
      "end": "\"",
      "patterns": [
        {
          "name": "keyword.other.assertions.commands.ciao",
          "match": "@[a-zA-Z]*"
        }
      ]
    },
    {
      "name": "string.quoted.double.ciao",
      "begin": "\"",
      "end": "(?<!\\\\)(\\\\\\\\)*\"",
      "patterns": [
        {
          "match": "\\\\\"",
          "name": "constant.character.escape.ciao"
        }
      ]
    },
    {
      "name": "string.quoted.single.ciao",
      "begin": "'",
      "end": "'"
    }
  ]
}
